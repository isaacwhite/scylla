<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: nyct-subway.proto
//   Date: 2013-06-01 20:28:05

// @@protoc_insertion_point(scope_file)

namespace  {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_)

  class TripReplacementPeriod extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.TripReplacementPeriod');

      // optional  route_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "route_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.TripReplacementPeriod:route_id)
      $descriptor->addField($f);

      // optional .transit_realtime.TimeRange replacement_period = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "replacement_period";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TimeRange';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.TripReplacementPeriod:replacement_period)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_.TripReplacementPeriod)

      return $descriptor;
    }

    /**  @var string */
    public $route_id = null;
    
    /**  @var \transit_realtime\TimeRange */
    public $replacement_period = null;
    

    /**
     * Check if <route_id> has a value
     *
     * @return boolean
     */
    public function hasRouteId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <route_id> value
     *
     * @return \TripReplacementPeriod
     */
    public function clearRouteId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <route_id> value
     *
     * @return string
     */
    public function getRouteId(){
      return $this->_get(1);
    }
    
    /**
     * Set <route_id> value
     *
     * @param string $value
     * @return \TripReplacementPeriod
     */
    public function setRouteId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <replacement_period> has a value
     *
     * @return boolean
     */
    public function hasReplacementPeriod(){
      return $this->_has(2);
    }
    
    /**
     * Clear <replacement_period> value
     *
     * @return \TripReplacementPeriod
     */
    public function clearReplacementPeriod(){
      return $this->_clear(2);
    }
    
    /**
     * Get <replacement_period> value
     *
     * @return \transit_realtime\TimeRange
     */
    public function getReplacementPeriod(){
      return $this->_get(2);
    }
    
    /**
     * Set <replacement_period> value
     *
     * @param \transit_realtime\TimeRange $value
     * @return \TripReplacementPeriod
     */
    public function setReplacementPeriod(\transit_realtime\TimeRange $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_.TripReplacementPeriod)
  }
}

namespace  {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_)

  class NyctFeedHeader extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.NyctFeedHeader');

      // required  nyct_subway_version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "nyct_subway_version";
      $f->type      = 9;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctFeedHeader:nyct_subway_version)
      $descriptor->addField($f);

      // repeated .TripReplacementPeriod trip_replacement_period = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trip_replacement_period";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\TripReplacementPeriod';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctFeedHeader:trip_replacement_period)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_.NyctFeedHeader)

      return $descriptor;
    }

    /**  @var string */
    public $nyct_subway_version = null;
    
    /**  @var \TripReplacementPeriod[]  */
    public $trip_replacement_period = array();
    

    /**
     * Check if <nyct_subway_version> has a value
     *
     * @return boolean
     */
    public function hasNyctSubwayVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <nyct_subway_version> value
     *
     * @return \NyctFeedHeader
     */
    public function clearNyctSubwayVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <nyct_subway_version> value
     *
     * @return string
     */
    public function getNyctSubwayVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <nyct_subway_version> value
     *
     * @param string $value
     * @return \NyctFeedHeader
     */
    public function setNyctSubwayVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trip_replacement_period> has a value
     *
     * @return boolean
     */
    public function hasTripReplacementPeriod(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trip_replacement_period> value
     *
     * @return \NyctFeedHeader
     */
    public function clearTripReplacementPeriod(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trip_replacement_period> value
     *
     * @param int $idx
     * @return \TripReplacementPeriod
     */
    public function getTripReplacementPeriod($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <trip_replacement_period> value
     *
     * @param \TripReplacementPeriod $value
     * @return \NyctFeedHeader
     */
    public function setTripReplacementPeriod(\TripReplacementPeriod $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <trip_replacement_period>
     *
     * @return \TripReplacementPeriod[]
     */
    public function getTripReplacementPeriodList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <trip_replacement_period>
     *
     * @param \TripReplacementPeriod $value
     * @return \NyctFeedHeader
     */
    public function addTripReplacementPeriod(\TripReplacementPeriod $value){
     return $this->_add(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_.NyctFeedHeader)
  }
}

namespace NyctTripDescriptor {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_.NyctTripDescriptor)

  class Direction {
    const NORTH = 1;
    const EAST = 2;
    const SOUTH = 3;
    const WEST = 4;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_.NyctTripDescriptor.Direction)
  }
}
namespace  {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_)

  class NyctTripDescriptor extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.NyctTripDescriptor');

      // optional  train_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "train_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctTripDescriptor:train_id)
      $descriptor->addField($f);

      // optional  is_assigned = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "is_assigned";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctTripDescriptor:is_assigned)
      $descriptor->addField($f);

      // optional .NyctTripDescriptor.Direction direction = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "direction";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\NyctTripDescriptor\Direction';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctTripDescriptor:direction)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_.NyctTripDescriptor)

      return $descriptor;
    }

    /**  @var string */
    public $train_id = null;
    
    /**  @var boolean */
    public $is_assigned = null;
    
    /**  @var int - \NyctTripDescriptor\Direction */
    public $direction = null;
    

    /**
     * Check if <train_id> has a value
     *
     * @return boolean
     */
    public function hasTrainId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <train_id> value
     *
     * @return \NyctTripDescriptor
     */
    public function clearTrainId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <train_id> value
     *
     * @return string
     */
    public function getTrainId(){
      return $this->_get(1);
    }
    
    /**
     * Set <train_id> value
     *
     * @param string $value
     * @return \NyctTripDescriptor
     */
    public function setTrainId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <is_assigned> has a value
     *
     * @return boolean
     */
    public function hasIsAssigned(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_assigned> value
     *
     * @return \NyctTripDescriptor
     */
    public function clearIsAssigned(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_assigned> value
     *
     * @return boolean
     */
    public function getIsAssigned(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_assigned> value
     *
     * @param boolean $value
     * @return \NyctTripDescriptor
     */
    public function setIsAssigned( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <direction> has a value
     *
     * @return boolean
     */
    public function hasDirection(){
      return $this->_has(3);
    }
    
    /**
     * Clear <direction> value
     *
     * @return \NyctTripDescriptor
     */
    public function clearDirection(){
      return $this->_clear(3);
    }
    
    /**
     * Get <direction> value
     *
     * @return int - \NyctTripDescriptor\Direction
     */
    public function getDirection(){
      return $this->_get(3);
    }
    
    /**
     * Set <direction> value
     *
     * @param int - \NyctTripDescriptor\Direction $value
     * @return \NyctTripDescriptor
     */
    public function setDirection( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_.NyctTripDescriptor)
  }
}

namespace  {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_)

  class NyctStopTimeUpdate extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.NyctStopTimeUpdate');

      // optional  scheduled_track = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "scheduled_track";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctStopTimeUpdate:scheduled_track)
      $descriptor->addField($f);

      // optional  actual_track = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "actual_track";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_.NyctStopTimeUpdate:actual_track)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_.NyctStopTimeUpdate)

      return $descriptor;
    }

    /**  @var string */
    public $scheduled_track = null;
    
    /**  @var string */
    public $actual_track = null;
    

    /**
     * Check if <scheduled_track> has a value
     *
     * @return boolean
     */
    public function hasScheduledTrack(){
      return $this->_has(1);
    }
    
    /**
     * Clear <scheduled_track> value
     *
     * @return \NyctStopTimeUpdate
     */
    public function clearScheduledTrack(){
      return $this->_clear(1);
    }
    
    /**
     * Get <scheduled_track> value
     *
     * @return string
     */
    public function getScheduledTrack(){
      return $this->_get(1);
    }
    
    /**
     * Set <scheduled_track> value
     *
     * @param string $value
     * @return \NyctStopTimeUpdate
     */
    public function setScheduledTrack( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <actual_track> has a value
     *
     * @return boolean
     */
    public function hasActualTrack(){
      return $this->_has(2);
    }
    
    /**
     * Clear <actual_track> value
     *
     * @return \NyctStopTimeUpdate
     */
    public function clearActualTrack(){
      return $this->_clear(2);
    }
    
    /**
     * Get <actual_track> value
     *
     * @return string
     */
    public function getActualTrack(){
      return $this->_get(2);
    }
    
    /**
     * Set <actual_track> value
     *
     * @param string $value
     * @return \NyctStopTimeUpdate
     */
    public function setActualTrack( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_.NyctStopTimeUpdate)
  }
}

namespace {
  \transit_realtime\FeedHeader::extension(function(){
      // optional .NyctFeedHeader nyct_feed_header = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "nyct_feed_header";
    $f->type      = 11;
    $f->rule      = 1;
    $f->reference = '\NyctFeedHeader';
    // @@protoc_insertion_point(scope_field)
    // @@protoc_insertion_point(field_:nyct_feed_header)
    // @@protoc_insertion_point(scope_extension)
    // @@protoc_insertion_point(extension_:nyct_feed_header)
    return $f;
  });
  \transit_realtime\TripDescriptor::extension(function(){
      // optional .NyctTripDescriptor nyct_trip_descriptor = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "nyct_trip_descriptor";
    $f->type      = 11;
    $f->rule      = 1;
    $f->reference = '\NyctTripDescriptor';
    // @@protoc_insertion_point(scope_field)
    // @@protoc_insertion_point(field_:nyct_trip_descriptor)
    // @@protoc_insertion_point(scope_extension)
    // @@protoc_insertion_point(extension_:nyct_trip_descriptor)
    return $f;
  });
  \transit_realtime\TripUpdate\StopTimeUpdate::extension(function(){
      // optional .NyctStopTimeUpdate nyct_stop_time_update = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "nyct_stop_time_update";
    $f->type      = 11;
    $f->rule      = 1;
    $f->reference = '\NyctStopTimeUpdate';
    // @@protoc_insertion_point(scope_field)
    // @@protoc_insertion_point(field_:nyct_stop_time_update)
    // @@protoc_insertion_point(scope_extension)
    // @@protoc_insertion_point(extension_:nyct_stop_time_update)
    return $f;
  });
}